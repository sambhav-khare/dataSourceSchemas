/*
 Proto file for the VA flow
*/
syntax = "proto3";

package com.cisco.wcc.ccai.v1;

import "google/protobuf/struct.proto";
import "com/cisco/wcc/ccai/v1/common/recognize.proto";

/*
 A wrapper of repeated TelephonyDtmf digits.
*/
message DtmfEvents {
  repeated Dtmf dtmf_events = 1;        // A sequence of TelephonyDtmf digits.
}

/*
 [DTMF](https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling)
 dtmf digit
*/
enum Dtmf {
  // Not specified.
  TELEPHONY_DTMF_UNSPECIFIED = 0;

  // Number: '1'.
  DTMF_ONE = 1;

  // Number: '2'.
  DTMF_TWO = 2;

  // Number: '3'.
  DTMF_THREE = 3;

  // Number: '4'.
  DTMF_FOUR = 4;

  // Number: '5'.
  DTMF_FIVE = 5;

  // Number: '6'.
  DTMF_SIX = 6;

  // Number: '7'.
  DTMF_SEVEN = 7;

  // Number: '8'.
  DTMF_EIGHT = 8;

  // Number: '9'.
  DTMF_NINE = 9;

  // Number: '0'.
  DTMF_ZERO = 10;

  // Letter: 'A'.
  DTMF_A = 11;

  // Letter: 'B'.
  DTMF_B = 12;

  // Letter: 'C'.
  DTMF_C = 13;

  // Letter: 'D'.
  DTMF_D = 14;

  // Asterisk/star: '*'.
  DTMF_STAR = 15;

  // Pound/diamond/hash/square/gate/octothorpe: '#'.
  DTMF_POUND = 16;
}

/*
 Represents the Events
*/
message InputEvent {
  enum EventType {
    UNSPECIFIED = 0;
    // If sent this event will make the connector to start the session with provider.
    CALL_START = 1;
    CALL_END = 2;
    CUSTOM = 3;
    NO_INPUT = 4; //No input event in case of no input received from caller.
    START_OF_DTMF = 5; //event to indicate start of dtmf input.
  }

  EventType event_type = 1;           // Event Type
  string name = 2;                    // Optional: To be used for the custom event.
  google.protobuf.Struct parameters = 3; // Optional: Map to pass the custom params.
}

/*
 Represents the Response of Virtual Agent
*/
message VirtualAgentResult {
  repeated Prompt prompts = 1;        // Return 1 or more prompts to be played by client
  string response_payload = 2;        // Provider specific Response object in JSON encoded string
  NLU nlu = 3;                        // NLU
  InputMode input_mode = 4;           // Input Mode for the next input
  bool is_secure = 5;                 // secure flag from provider to indicate sensitive input
  ExecuteRequest execute_request = 6 [deprecated=true]; // Request to execute the routing at client side by breaking the callflow.
  ResponseType response_type = 7;     // VA response type from provider (Partial/Final)
  enum ResponseType {
    RESPONSE_FINAL = 0;               // No more response expected
    RESPONSE_PARTIAL = 1;             // Expect more response from server
  }
  InputConfigInfer input_config_infer = 8; // Input config for the clients to handle timeouts and buffering of DTMF user inputs
  int32 no_input_timeout_ms = 9; // Maximum silence,  in ms, allowed while waiting for user input after recognition timers are started. A value of 0 means no timeout.
}

/*
 Input config for the client.
  */
message InputConfigInfer {
  DTMFConfig dtmf_config = 1; // DTMF Input Configurations
  SpeechTimers speech_timers = 2; // Represents the TimerInfo object
}

/*
 Type of Input expected from User
*/
enum InputMode {
  INPUT_MODE_UNSPECIFIED = 0;
  INPUT_VOICE = 1;
  INPUT_DTMF = 2;
  INPUT_VOICE_DTMF = 3;
}

/**
 Event received from the Virtual Agent
*/
message ExitEvent {
  enum EventType {
    UNSPECIFIED = 0;
    VA_CALL_END = 1;
    AGENT_TRANSFER = 2;
    CUSTOM = 3;
  }
  EventType event_type = 1;           // Event Type
  string name = 2;                    // Optional: To be used for the custom event.
  google.protobuf.Struct metadata = 3; // Optional: Map to pass the custom params.
}

/*
 NLU Object generated from User Utterance.
*/
message NLU {
  repeated string reply_text = 1;     // Response in text. This will be used for Virtual Agent Transcript.
  Intent intent = 2;                  // Intent detected from the last utterance.
  AgentTransfer agent_transfer = 3 [deprecated=true];   // Sent when the call is transferred to Agent
  EndVirtualAgent end_virtual_agent = 4 [deprecated=true]; // Call Ended
  string input_text = 5;              // user input uttered by caller
  ExitEvent exit_event = 6;           // Exit Event to return the control back to the calling flow
}

//List of Call Insight Types
enum CallInsightType {
  UNSPECIFIED       =  0;
  VA_CALL_SUMMARY         =  1;
}

/**
* Call Insights Object for VA Call Summary
*/
message CallInsightsResult {
  string content = 1 ; //Content
  CallInsightType callInsightType = 2; //Call Insight Type
}

/*
 Represents the Intent Detected form user utterance
*/
message Intent {
  string name = 1;                    // Name of the Intent
  string display_name = 2;            // Display name of the Intent
  google.protobuf.Struct parameters = 3;  // Parameters of an Intent, filled / not filled.
  float  match_confidence = 4;        // Match Confidence
}

/*
 Call Transferred to Human Agent
*/
message AgentTransfer {
  google.protobuf.Struct metadata = 1;  // Call Transfer Metadata
}

/*
 Represents the Virtual Agent End Indication
 */
message EndVirtualAgent {
  google.protobuf.Struct metadata = 1;  // Call Transfer Metadata
}

/*
Prompt object to be played by Client.
Google / Nuance
// Google: Merge the response messages with text and audio into one Prompt object.
// Nuance:
 */
message Prompt {
  string text = 1;                    // Response in text.
  string audio_uri    = 2;            // Response in the form of a Audio URL. Client Need to play the locally. Optional
  bytes audio_content = 3;            // Response in the form of Audio Content. In case of Chunked audio this will repeat. Optional
  bool bargein = 4;                   // Whether the current prompt is barge-in enabled. Optional, Default: false
  bool final = 5;                    // Whether the current chunk is last chunk. Optional, Default: false
}

/*
  Message containing the details of the event being called by Dialog Manager to be executed on client side.
 */
message ExecuteRequest {
  string event_name = 1;              // Name of the event to be used to return back to the callflow.
  string event_data = 2;              // Custom data to be used by the client to execute the request.
}

message VirtualAgent{

  //Indicates the bots unique identifier
  string virtualAgentId = 1;

  //Indicates the bot name
  string virtualAgentName = 2;

  //Indicates whether the respective bot is a default bot for the selected provider
  bool isDefault = 3;

  // Any additional attributes that are required
  map<string, string> additionalAttributes = 4;
}
