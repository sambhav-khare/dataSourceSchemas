/*
common Proto file for the media service flow
*/
syntax = "proto3";

package com.cisco.wcc.ccai.media.v1;
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// Role of the participant providing transcript or DTMF input.
enum ParticipantRole {
  ROLE_UNSPECIFIED = 0;
  CALLER = 1;
  AGENT = 2;
  SUPERVISOR = 3; //Supervisor role is not supported yet from Webex side and this field is relevant for future development
}

// Details for the CALL_STARTED event.
message CallStartedDetails {
  // Caller and callee ids might be numbers or UUIDs.
  // We could change string to specific objects if needed.
  string caller_id = 1;
  string callee_id = 2;
  string call_direction = 3; // Direction of the call (e.g., inbound or outbound)
}

// Details for transfer events.
message TransferDetails {
  // IDs may be UUIDs or phone numbers.
  // A URN format might be helpful here.
  string transferror_id = 1;
  string transferree_id = 2;
  string transfer_to_id = 3;
}

// Details for whisper coaching events.
message WhisperCoachingDetails {
  string supervisor_id = 1;  // The supervisor providing whisper coaching.
  string agent_id = 2;       // The agent being coached.
}

// Details for supervisor barge-in events.
message SupervisorBargeInDetails {
  string supervisor_id = 1;  // The supervisor joining the conversation.
  // Indicates if the barge-in is silent or the supervisor can speak.
  bool silent_barge = 2;
}

// DTMF input events during the conversation.
message AudioDtmfEvents {
  repeated DTMFs dtmf_digits = 1; // Sequence of DTMF digits.

  // Role of the participant providing the DTMF input (caller, agent, or supervisor).
  ParticipantRole role = 2;

  // Timestamp of when the DTMF input was received.
  google.protobuf.Timestamp dtmf_timestamp = 3;

  // IDs might be numbers or UUIDs.
  // We could change string to specific objects if needed.
  string user_id = 4;
}

// Call state events (e.g., call start, call end, transfer, etc.).
message CallEvent {

  CallEventType event_type = 1;

  // Timestamp of the event.
  google.protobuf.Timestamp event_timestamp = 2;

  // Specific parameters for events
  // (e.g., call start details, custom event metadata).
  // Can add specific Message structures for other events as needed.
  oneof event_details {
    // Parameters for the CALL_STARTED event.
    CallStartedDetails call_started_details = 3;

    // Parameters for a custom event.
    google.protobuf.Struct custom_event_parameters = 4;

    // For CONSULT_TRANSFER and BLIND_TRANSFER,
    // details of the agent or supervisor involved.
    TransferDetails transfer_details = 5;

    // For WHISPER_COACHING, details of the supervisor coaching the agent.
    WhisperCoachingDetails whisper_coaching_details = 6;

    // For SUPERVISOR_BARGE_IN,
    // details of the supervisor joining the conversation.
    SupervisorBargeInDetails supervisor_barge_in_details = 7;
  }
}


// Control message to pause, resume, or stop the stream.
message StreamControl {
  enum ControlType {
    CONTROL_UNSPECIFIED = 0;
    PAUSE = 1;  // Request to pause the stream.
    RESUME = 2; // Request to resume the stream.
    STOP = 3;   // Request to stop the stream.
  }
  ControlType control_type = 1;
}


// Indicates the current status of the stream from the client side.
enum StreamStatus {
  STREAM_STATUS_UNSPECIFIED = 0;
  INACTIVE = 1; // The stream has not started.
  ACTIVE = 2;   // The stream is currently active.
  PAUSED = 3;   // The stream is paused.
}

// Enumeration for non-functional error handling.
enum ErrorCode {
  ERROR_NONE = 0;
  ERROR_INVALID_AUDIO_FORMAT = 1;
  ERROR_INVALID_DTMF = 2;
  ERROR_CALL_EVENT_MISSING = 3;
  ERROR_STREAM_FAILURE = 4;
}

enum CallEventType {
  EVENT_UNSPECIFIED = 0;
  CALL_STARTED = 1;         // Indicates the call has started.
  CALL_ENDED = 2;           // Indicates the call has ended.
  TRANSFER_TO_AGENT = 3;    // Call is being transferred to a human agent.
  ON_HOLD = 4;              // Call is placed on hold.
  OFF_HOLD = 5;             // Call is resumed.
  MUTE = 6;                 // The call is muted.
  UNMUTE = 7;               // The call is unmuted.
  CONSULT_TRANSFER = 8;     // Indicates a consult transfer.
  BLIND_TRANSFER = 9;       // Indicates a blind transfer.
  WHISPER_COACHING = 10;    // Indicates whisper coaching for the agent.
  // Indicates supervisor barge-in to the conversation.
  SUPERVISOR_BARGE_IN = 11;
  CUSTOM_EVENT = 12;        // Any custom event related to the call.
}

// Encoding format of the audio data.
enum AudioEncoding {
  UNSPECIFIED = 0;
  LINEAR16 = 1; // 16-bit linear PCM.
  MULAW = 2;  // G.711 mu-law.
  ALAW = 3; // G.711 A-law.
}

/* DTMF digits, including A, B, C, and D.*/
enum DTMFs {
  DTMF_UNSPECIFIED = 0;
  // Number: '1'.
  DTMF_ONE = 1;

  // Number: '2'.
  DTMF_TWO = 2;

  // Number: '3'.
  DTMF_THREE = 3;

  // Number: '4'.
  DTMF_FOUR = 4;

  // Number: '5'.
  DTMF_FIVE = 5;

  // Number: '6'.
  DTMF_SIX = 6;

  // Number: '7'.
  DTMF_SEVEN = 7;

  // Number: '8'.
  DTMF_EIGHT = 8;

  // Number: '9'.
  DTMF_NINE = 9;

  // Number: '10'.
  DTMF_ZERO = 10;

  // Letter: 'A'.
  DTMF_A = 11;

  // Letter: 'B'.
  DTMF_B = 12;

  // Letter: 'C'.
  DTMF_C = 13;

  // Letter: 'D'.
  DTMF_D = 14;

  // Asterisk/star: '*'.
  DTMF_STAR = 15;

  // Pound/diamond/hash/square/gate/octothorpe: '#'.
  DTMF_POUND = 16;
}

/*
 Content of the text input
*/
message InputTextContent {
  // The content can be either plain text or SSML.
  oneof input_content {
    // Plain text input.
    string text = 1;

    // Optional. SSML formatted text input.
    string ssml = 2;
  }
  // Language code ofF the user input, e.g., 'en-US'.
  string language_code = 3;
}