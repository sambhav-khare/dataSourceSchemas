syntax = "proto3";

package com.cisco.wcc.ccai.media.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "media_service_common.proto";

// Request message for streaming conversation audio, DTMF, and events.
message ConversationAudioForkingRequest {
  // Conversation ID - mapped to call ID.
  string conversation_id = 1;

  // Customer org id.
  string customer_org_id = 2;

  // Indicates the current stream status (e.g., PAUSED or ACTIVE).
  StreamStatus stream_status = 3;

  oneof stream_input {
    // Audio stream.
    AudioStream audio = 4;

    // DTMF tones input during the call.
    AudioDtmfEvents dtmf_input = 5;

    // Call state events (e.g., call start, call end).
    CallEvent call_event = 6;
  }
}

message AudioStream {
  // The raw audio bytes for the stream (either agent or caller).
  bytes audio_data = 1;

  AudioEncoding encoding = 2;

  // Sampling rate of the input audio in Hz.
  int32 sample_rate_hertz = 3;

  // Start timestamp of when the audio data was captured.
  google.protobuf.Timestamp audio_timestamp = 4;

  // Role of the participant providing the audio (caller, agent, or supervisor).
  ParticipantRole role = 5;

  // IDs might be numbers or UUIDs.
  // We could change string to specific objects if needed.
  string user_id = 6;
}

// Response message for server to send control commands or status to the client.
message ConversationAudioForkingResponse {
  // Optional acknowledgment or status message.
  string status_message = 1;

  // Stream control message for pause, resume, or stop actions.
  StreamControl control = 2;

  // Any error codes related to processing the stream (optional).
  ErrorCode error_code = 3;
}

// Service definition for streaming agent and caller audio, DTMF, and call events.
service ConversationAudio {
  // Bidirectional streaming RPC where the client streams data, and the server sends control commands.
  rpc StreamConversationAudio(stream ConversationAudioForkingRequest) returns (stream ConversationAudioForkingResponse);
}