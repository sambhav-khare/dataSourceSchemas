/*
 This proto contains all the messages required for tts synthesize service
*/
syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";

/*
 Gender of the voice as described in
 [SSML voice element](https://www.w3.org/TR/speech-synthesis11/#edef_voice).
*/
enum SsmlVoiceGender {
   /*
   An unspecified gender.
   In VoiceSelectionParams, this means that the client doesn't care which
   gender the selected voice will have. In the Voice field of
   ListVoicesResponse, this may mean that the voice doesn't fit any of the
   other categories in this enum, or that the gender of the voice isn't known.
   */
  SSML_VOICE_GENDER_UNSPECIFIED = 0;

  // A male voice.
  MALE = 1;

  // A female voice.
  FEMALE = 2;

  // A gender-neutral voice. This voice is not yet supported.
  NEUTRAL = 3;
}

/*
 Description of a voice supported by the TTS service.
*/
message Voice {
  /* The languages that this voice supports, expressed as
   [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags (e.g.
   "en-US", "es-419", "cmn-tw").
  */
  string voice_language = 1;

  // The name of this voice.  Each distinct voice has a unique name.
  string voice_name = 2;

  // The gender of this voice.
  SsmlVoiceGender voice_gender = 3;

  // The natural sample rate (in hertz) for this voice.
  int32 voice_rate = 4;
}

/*
 Contains text input to be synthesized. Either `text` or `ssml` must be
 supplied. Supplying both or neither returns
 [google.rpc.Code.INVALID_ARGUMENT][]. The input size is limited to 5000
 characters.
*/
message SpeakInput {
  // The input source, which is either plain text or SSML.
  oneof input_source {
    // The raw text to be synthesized.
    string text = 1;

    /* The SSML document to be synthesized. The SSML document must be valid
     and well-formed. Otherwise the RPC will fail and return
     [google.rpc.Code.INVALID_ARGUMENT][]. For more information, see
     [SSML](https://cloud.google.com/text-to-speech/docs/ssml).
    */
    string ssml = 2;

    // The URL which needs to be fetched and played.
    string url = 3;

  }
}

/*
 Description of which voice to use for a synthesis request.
*/
message SpeakerParams {
   /*
   Required. The language (and potentially also the region) of the voice expressed as a
   [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag, e.g.
   "en-US". This should not include a script tag (e.g. use
   "cmn-cn" rather than "cmn-Hant-cn"), because the script will be inferred
   from the input provided in the SynthesisInput.  The TTS service
   will use this parameter to help choose an appropriate voice.  Note that
   the TTS service may choose a voice with a slightly different language code
   than the one selected; it may substitute a different region
   (e.g. using en-US rather than en-CA if there isn't a Canadian voice
   available), or even a different language, e.g. using "nb" (Norwegian
   Bokmal) instead of "no" (Norwegian)".
   */
  string language_code = 1 [(google.api.field_behavior) = REQUIRED];

  /*
   The name of the voice. If not set, the service will choose a
   voice based on the other parameters such as language_code and gender.
  */
  string name = 2;

  /*
   The preferred gender of the voice. If not set, the service will
   choose a voice based on the other parameters such as language_code and
   name. Note that this is only a preference, not requirement; if a
   voice of the appropriate gender is not available, the synthesizer should
   substitute a voice with a different gender rather than failing the request.
  */
  SsmlVoiceGender ssml_gender = 3;

  /* Type of the Voice e.g. Neural, Enhanced, Standard etc  */
  string model = 4;

}

// Description of audio data to be synthesized.
message AudioConfig {
  // Required. The format of the audio byte stream.
  OutputAudioEncoding audio_encoding = 1 [(google.api.field_behavior) = REQUIRED];

  /*
   Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is
   the normal native speed supported by the specific voice. 2.0 is twice as
   fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0
   speed. Any other values < 0.25 or > 4.0 will return an error.
  */
  double speaking_rate = 2 [
    (google.api.field_behavior) = INPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  /*
   Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means
   increase 20 semitones from the original pitch. -20 means decrease 20
   semitones from the original pitch.
  */
  double pitch = 3 [
    (google.api.field_behavior) = INPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  /*
   Optional. Input only. Volume gain (in dB) of the normal native volume
   supported by the specific voice, in the range [-96.0, 16.0]. If unset, or
   set to a value of 0.0 (dB), will play at normal native signal amplitude. A
   value of -6.0 (dB) will play at approximately half the amplitude of the
   normal native signal amplitude. A value of +6.0 (dB) will play at
   approximately twice the amplitude of the normal native signal amplitude.
   Strongly recommend not to exceed +10 (dB) as there's usually no effective
   increase in loudness for any value greater than that.
  */
  double volume_gain_db = 4 [
    (google.api.field_behavior) = INPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Optional. The synthesis sample rate (in hertz) for this audio.
  int32 sample_rate_hertz = 5 [(google.api.field_behavior) = OPTIONAL];

  // Required. The desired voice of the synthesized audio.
  SpeakerParams voice = 6 [(google.api.field_behavior) = REQUIRED];
}


/*
 This contains a mapping between a certain point in the input text and a
 corresponding time in the output audio.
*/
message Timepoint {
  // Timepoint name as received from the client within `<mark>` tag.
  string mark_name = 4;

  // Time offset in seconds from the start of the synthesized audio.
  double time_seconds = 3;
}

/*
  Represents the output audio encoding formats
*/
enum OutputAudioEncoding {
  // Not specified.
  OUTPUT_ENCODING_UNSPECIFIED = 0;
  // Uncompressed 16-bit signed little-endian samples (Linear PCM).
  OUTPUT_LINEAR16 = 1;
  // 8-bit samples that compound 14-bit audio samples using G.711 PCMU/mu-law.
  OUTPUT_MULAW = 2;
  // G.711 A-law, 8kHz
  OUTPUT_ALAW = 3;

  // MP3 audio at 32kbps.
  OUTPUT_MP3 = 4;

  /*
   Opus encoded audio wrapped in an ogg container. The result will be a
   file which can be played natively on Android, and in browsers (at least
   Chrome and Firefox). The quality of the encoding is considerably higher
   than MP3 while using approximately the same bitrate.
  */
  OGG_OPUS = 5;

}

/*
 Represents the Provider object used in list providers api
*/
message Provider {
  // Provider id
  string provider_id = 1;
  // Provider Name
  string provider_name = 2;
}

/*
 Represents the Provider Voice object mentioning the provider and voice information
*/
message ProviderVoices {
  Provider provider = 1;
  repeated Voice voice = 2;
}